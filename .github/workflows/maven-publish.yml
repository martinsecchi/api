name: Release

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set version based on run number
        id: version
        run: |
          TAG_NAME="v1.${{ github.run_number }}"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "VERSION=${TAG_NAME#v}" >> $GITHUB_ENV
      - name: Update version in pom.xml
        run: |
          mvn versions:set -DnewVersion=${{ env.VERSION }} -DgenerateBackupPoms=false
          # Asegura que el archivo pom.xml se actualice sin generar un archivo .bak
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add pom.xml
          git commit -m "Update version to ${{ env.VERSION }}"
          git push origin master

      - name: Update Dockerfile with version
        run: |
          # Reemplazar el marcador de versión en el Dockerfile
          sed -i "s/ARG VERSION=.*/ARG VERSION=${{ env.VERSION }}/" Dockerfile
          # También asegurarse de que el archivo JAR tenga la versión correcta
          sed -i "s/api-${{ env.VERSION }}.jar/api-${{ env.VERSION }}.jar/" Dockerfile    
          
          
          

      - name: Build with Maven
        run: mvn clean package

      - name: Create Git Tag
        run: |
          git tag ${{ env.TAG_NAME }}
          git push origin ${{ env.TAG_NAME }}
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: target/api-${{ env.VERSION }}.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: api
          path: target/api-${{ env.VERSION }}.jar

      # Nueva sección para construir la imagen Docker
      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/api:${{ env.VERSION }} .
          # También etiquetar la imagen como 'latest'
          docker tag ghcr.io/${{ github.repository_owner }}/api:${{ env.VERSION }} ghcr.io/${{ github.repository_owner }}/api:latest
      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Push Docker image to GitHub Container Registry
      - name: Push Docker image to GitHub Container Registry
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/api:${{ env.VERSION }}
          # Push the latest tag as well
          docker push ghcr.io/${{ github.repository_owner }}/api:latest